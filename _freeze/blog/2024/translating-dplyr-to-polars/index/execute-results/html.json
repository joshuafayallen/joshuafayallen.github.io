{
  "hash": "b99b136ef6af55aef27c0838f019fd8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Translating What I know in the tidyverse to polars:\"\ndate: last-modified\ndate-format: \"MMM D, YYYY\"\ndescription: \"This is me learning the snake language\"\ncategories:\n  - r\n  - tidyverse\n  - python\n  - polars\nknitr: \n   opts_chunk: \n     warning: false\n     message: false\njupyter: python3 \n---\n\n\nI suppose at some point it is good to become more well versed in lots of tools. I have been python curious for about a year or so and I think it is important to use the tool best suited for the task. Also sometimes it is important to get out of your comfort zone. I am definitely somebody who is very comfortable in R and the `tidyverse` and use it for a lot of stuff. I have heard lots of ravings about polars specifically about its speed and similarities in intuition with the tidyverse. So I thought I would have a collection of code for myself and the people of the internet to reference. \n\n\nJust a disclaimer. This is really just me working through the similarities and is going to be based on the [tidyintelligence's blog post](https://blog.tidy-intelligence.com/posts/dplyr-vs-polars/), [Robert Mitchell's blog post](https://robertmitchellv.com/blog/2022-07-r-python-side-by-side/r-python-side-by-side.html), and [Emily Rieder's blog post](https://www.emilyriederer.com/post/py-rgo-polars/). In all honesty, this is just for me to smash them together to have a one-stop shop for myself. If you found this post over these resources I highly recommend you check out these resources. \n\n\n\n# The Basics \n\nAs always we should load in the respective packages we are going to use. \n\n\n\n\n\n:::{.panel-tabset}\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(tidyverse))\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n## Python \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\nimport polars.selectors as cs\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins().pipe(pl.from_pandas)\n\n\npl.Config(tbl_rows = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<polars.config.Config object at 0x30c51e660>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\nOkay so far nothing too crazy! The main difference in loading in the packages and the data we are using is really just that to get with our familiar `starts_with` friends from the tidyverse we have to add `polars.selectors` and change some defaults. Lots of the time we would like to see the top and bottom portion and the column types. In `R` this is just our `head`, `tail`, `glimpse/str` in python it should be broadly similar. \n\n\n:::{.panel-tabset}\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins) |>\nknitr::kable(booktabs = TRUE)\n```\n\n::: {.cell-output-display}\n\n\n|species |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|\n|:-------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|\n|Adelie  |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|\n|Adelie  |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|\n|Adelie  |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|\n|Adelie  |Torgersen |             NA|            NA|                NA|          NA|NA     | 2007|\n|Adelie  |Torgersen |           36.7|          19.3|               193|        3450|female | 2007|\n|Adelie  |Torgersen |           39.3|          20.6|               190|        3650|male   | 2007|\n\n\n:::\n:::\n\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195.0</td><td>3250.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2007</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\nSo one big difference for me is that when you are doing things with objects instead of feeding them directly to head you are doing `object_name.head()` which I suppose will take some time to get used to. I suppose for completeness we should look at the glimpse equivalent since I use that function all the time \n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <str> 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie'\n$ island            <str> 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen'\n$ bill_length_mm    <f64> 39.1, 39.5, 40.3, None, 36.7, 39.3, 38.9, 39.2, 34.1, 42.0\n$ bill_depth_mm     <f64> 18.7, 17.4, 18.0, None, 19.3, 20.6, 17.8, 19.6, 18.1, 20.2\n$ flipper_length_mm <f64> 181.0, 186.0, 195.0, None, 193.0, 190.0, 181.0, 195.0, 193.0, 190.0\n$ body_mass_g       <f64> 3750.0, 3800.0, 3250.0, None, 3450.0, 3650.0, 3625.0, 4675.0, 3475.0, 4250.0\n$ sex               <str> 'male', 'female', 'female', None, 'female', 'male', 'female', 'male', None, None\n$ year              <i64> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007\n```\n\n\n:::\n:::\n\n\n:::\n\n\nOkay! What is cool for me so far about polars is that it is more getting used to the whole `.` thing. \n\n\n# Filter\n\nOne of the key things in data cleaning or working with data is working with observations that fit some criteria! In this case, lets just grab all the rows that have Adelie penguins and are above the mean body mass \n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nfilter(species == \"Adelie\", body_mass_g > mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Dream               39.8          19.1               184        4650\n 6 Adelie  Dream               44.1          19.7               196        4400\n 7 Adelie  Dream               39.6          18.8               190        4600\n 8 Adelie  Biscoe              40.1          18.9               188        4300\n 9 Adelie  Biscoe              41.3          21.1               195        4400\n10 Adelie  Torgersen           41.8          19.4               198        4450\n# ℹ 15 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.filter(pl.col(\"species\") == \"Adelie\" &\n                pl.col(\"body_mass_g\" > mean(pl.col(\"body_mass_g\"))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNameError: name 'mean' is not defined\n```\n\n\n:::\n:::\n\n\n:::\n\nThis is my first attempt at it! It looks like the problem  I am running into is that Python does not have a `base python` where a function like mean is defined. \n\nAfter fiddling with it for some time it turns out the filter call is actually not correctly defined either! So before each filter option, you need to add a set of `()`\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nfilter(species == \"Adelie\", body_mass_g > mean(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 25 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Dream               39.8          19.1               184        4650\n 6 Adelie  Dream               44.1          19.7               196        4400\n 7 Adelie  Dream               39.6          18.8               190        4600\n 8 Adelie  Biscoe              40.1          18.9               188        4300\n 9 Adelie  Biscoe              41.3          21.1               195        4400\n10 Adelie  Torgersen           41.8          19.4               198        4450\n# ℹ 15 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.filter((pl.col(\"species\") == \"Adelie\") &\n                (pl.col(\"body_mass_g\") > pl.col(\"body_mass_g\").mean()))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (25, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.2</td><td>19.6</td><td>195.0</td><td>4675.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.0</td><td>20.2</td><td>190.0</td><td>4250.0</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>34.6</td><td>21.1</td><td>198.0</td><td>4400.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>42.5</td><td>20.7</td><td>197.0</td><td>4500.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.8</td><td>19.1</td><td>184.0</td><td>4650.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Biscoe&quot;</td><td>42.2</td><td>19.5</td><td>197.0</td><td>4275.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>41.5</td><td>18.3</td><td>195.0</td><td>4300.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>37.5</td><td>18.5</td><td>199.0</td><td>4475.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.7</td><td>17.9</td><td>193.0</td><td>4250.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Dream&quot;</td><td>39.2</td><td>18.6</td><td>190.0</td><td>4250.0</td><td>&quot;male&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\nNobody said this was going to be pretty or seamless! One other thing to get used to is that we are not going to be using something crazy like `%in%` for set membership! We use `is_in` \n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nfilter(species %in% c(\"Gentoo\", \"Chinstrap\"),\n       bill_depth_mm > median(bill_depth_mm, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 52 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Chinstrap Dream            46.5          17.9               192        3500\n 2 Chinstrap Dream            50            19.5               196        3900\n 3 Chinstrap Dream            51.3          19.2               193        3650\n 4 Chinstrap Dream            45.4          18.7               188        3525\n 5 Chinstrap Dream            52.7          19.8               197        3725\n 6 Chinstrap Dream            45.2          17.8               198        3950\n 7 Chinstrap Dream            46.1          18.2               178        3250\n 8 Chinstrap Dream            51.3          18.2               197        3750\n 9 Chinstrap Dream            46            18.9               195        4150\n10 Chinstrap Dream            51.3          19.9               198        3700\n# ℹ 42 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.filter((pl.col(\"species\").is_in([\"Chinstrap\", \"Gentoo\"])) & \n                (pl.col(\"bill_depth_mm\") > pl.col(\"bill_depth_mm\").median()))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (52, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>46.5</td><td>17.9</td><td>192.0</td><td>3500.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.0</td><td>19.5</td><td>196.0</td><td>3900.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>51.3</td><td>19.2</td><td>193.0</td><td>3650.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>45.4</td><td>18.7</td><td>188.0</td><td>3525.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>52.7</td><td>19.8</td><td>197.0</td><td>3725.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202.0</td><td>3400.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193.0</td><td>3775.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210.0</td><td>4100.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198.0</td><td>3775.0</td><td>&quot;female&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\n\nOne other thing that is weird (to me at least) is that you do not have to set the polars functions to remove NA's by default! Which I suppose is nice? But feels a bit wrong and weird to me as an R user. \n\nA common case that you run into is that maybe there are a whole bunch of things or one thing that you don't want. In R you would just add the neccessary negations ahead of what you want. In polars it is a little different if you want to exclude values from a set.\n\n\n::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nfilter(!species %in% c(\"Gentoo\", \"Chinstrap\"),\n       island != \"Dream\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 96 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 86 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# | error: true\n# | label: set-filter-not\n\npenguins.filter((pl.col(\"species\").is_in([\"Chinstrap\", \"Gentoo\"]).not_()) &\n                (pl.col(\"island\") != 'Dream'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (96, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195.0</td><td>3250.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2007</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>41.5</td><td>18.3</td><td>195.0</td><td>4300.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.0</td><td>17.1</td><td>191.0</td><td>3050.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>44.1</td><td>18.0</td><td>210.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>38.5</td><td>17.9</td><td>190.0</td><td>3325.0</td><td>&quot;female&quot;</td><td>2009</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>43.1</td><td>19.2</td><td>197.0</td><td>3500.0</td><td>&quot;male&quot;</td><td>2009</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\n\n\n# Select \n\n\nIn some cases, we have a dataset with extraneous columns we do not care for. Let's do a really extreme example \n\n\n\n:::{.panel-tabset}\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nselect(island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 1\n   island   \n   <fct>    \n 1 Torgersen\n 2 Torgersen\n 3 Torgersen\n 4 Torgersen\n 5 Torgersen\n 6 Torgersen\n 7 Torgersen\n 8 Torgersen\n 9 Torgersen\n10 Torgersen\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.select((pl.col(\"island\")))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Torgersen&quot;</td></tr><tr><td>&hellip;</td></tr><tr><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Dream&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n:::\n\n\nOKAY! first try now we are cooking! If we wanted to do multiple columns we would do something to the effect of\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nselect(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   species island   \n   <fct>   <fct>    \n 1 Adelie  Torgersen\n 2 Adelie  Torgersen\n 3 Adelie  Torgersen\n 4 Adelie  Torgersen\n 5 Adelie  Torgersen\n 6 Adelie  Torgersen\n 7 Adelie  Torgersen\n 8 Adelie  Torgersen\n 9 Adelie  Torgersen\n10 Adelie  Torgersen\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\nTo do multiple columns we could do something to the effect of this:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.select((pl.col(\"species\", \"island\")))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\nWhich feels more natural to me, but to some extent a dictionary would probably be more pythony. One thing I use all the time is using tidyselectors like `starts_with` \n\n### Using Selectors\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nselect(starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.select(cs.starts_with(\"bill\"))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>bill_length_mm</th><th>bill_depth_mm</th></tr><tr><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>39.1</td><td>18.7</td></tr><tr><td>39.5</td><td>17.4</td></tr><tr><td>40.3</td><td>18.0</td></tr><tr><td>null</td><td>null</td></tr><tr><td>36.7</td><td>19.3</td></tr><tr><td>&hellip;</td><td>&hellip;</td></tr><tr><td>55.8</td><td>19.8</td></tr><tr><td>43.5</td><td>18.1</td></tr><tr><td>49.6</td><td>18.2</td></tr><tr><td>50.8</td><td>19.0</td></tr><tr><td>50.2</td><td>18.7</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n:::\n\nThis is actually so cool that in this case it works exactly like the tidyverse selector functions! \n\n# Renaming Columns\n\nI am a simple man I like snake_case but lets say I am more camel case inclined. I may want to rename columns that I am using as to not deal with object not found messages because I am used to typing billLengthMm. In the tidyverse we would do \n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nrename(BillLengthMm = bill_length_mm,\n       BillDepthMm = bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island   BillLengthMm BillDepthMm flipper_length_mm body_mass_g sex  \n   <fct>   <fct>           <dbl>       <dbl>             <int>       <int> <fct>\n 1 Adelie  Torgers…         39.1        18.7               181        3750 male \n 2 Adelie  Torgers…         39.5        17.4               186        3800 fema…\n 3 Adelie  Torgers…         40.3        18                 195        3250 fema…\n 4 Adelie  Torgers…         NA          NA                  NA          NA <NA> \n 5 Adelie  Torgers…         36.7        19.3               193        3450 fema…\n 6 Adelie  Torgers…         39.3        20.6               190        3650 male \n 7 Adelie  Torgers…         38.9        17.8               181        3625 fema…\n 8 Adelie  Torgers…         39.2        19.6               195        4675 male \n 9 Adelie  Torgers…         34.1        18.1               193        3475 <NA> \n10 Adelie  Torgers…         42          20.2               190        4250 <NA> \n# ℹ 334 more rows\n# ℹ 1 more variable: year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins = penguins.rename({\"bill_length_mm\":\"BillLengthMm\",\n                \"bill_depth_mm\":\"BillDepthMm\"})\n\n\npenguins = penguins.rename({\"BillLengthMm\": \"bill_length_mm\", \n              \"BillDepthMm\":\"bill_depth_mm\"})\n\n```\n:::\n\n\n:::\n\n\nIn effect the thing you need to switch in your head when working in polars is that the order goes `old_name`:`new_name` I assigned it to an object because I wanted to test out a module I found online.\n\n# Mutate \n\nOkay we have worked with subsets now we need to actually create some things. We should also work on chaining things together. Lets first with doing math stuff to the columns. Lets start with how I think it works in polars and if it errors then we can go and fix it\n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nmutate(sqr_bill_length = bill_length_mm^2) |>\nselect(sqr_bill_length) |>\nhead()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  sqr_bill_length\n            <dbl>\n1           1529.\n2           1560.\n3           1624.\n4             NA \n5           1347.\n6           1544.\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.mutate({pl.col(\"bill_length_mm\")^2: \"sqr_bill_length\"}).select(pl.col(\"sqr_bill_length\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAttributeError: 'DataFrame' object has no attribute 'mutate'\n```\n\n\n:::\n:::\n\n\n:::\n\n\nOkay where I am coming from is that in my head what we are doing is using the same logic as renaming columns. Lets fix it. So the first problem is that there is no `mutate` verb. Instead we use `with_column` \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.with_columns(sqr_bill_length = pl.col(\"bill_length_mm\")**2).select(pl.col(\"sqr_bill_length\")).head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sqr_bill_length</th></tr><tr><td>f64</td></tr></thead><tbody><tr><td>1528.81</td></tr><tr><td>1560.25</td></tr><tr><td>1624.09</td></tr><tr><td>null</td></tr><tr><td>1346.89</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nOkay this is the general idea. One of the big advantages of mutate is that we chain things together in the same mutate col. So lets say we wanted to square something than return it back to the original value\n\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nmutate(sqr_bill = bill_length_mm^2,\n       og_bill = sqrt(sqr_bill)) |>\n       select(sqr_bill, og_bill, bill_length_mm) |>\n       head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  sqr_bill og_bill bill_length_mm\n     <dbl>   <dbl>          <dbl>\n1    1529.    39.1           39.1\n2    1560.    39.5           39.5\n3    1624.    40.3           40.3\n4      NA     NA             NA  \n5    1347.    36.7           36.7\n```\n\n\n:::\n:::\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.with_columns(sqr_bill = pl.col(\"bill_length_mm\")**2).with_columns(og_bill = pl.col(\"sqr_bill\").sqrt()).select(pl.col(\"sqr_bill\", \"og_bill\", \"bill_length_mm\")).head(5)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sqr_bill</th><th>og_bill</th><th>bill_length_mm</th></tr><tr><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1528.81</td><td>39.1</td><td>39.1</td></tr><tr><td>1560.25</td><td>39.5</td><td>39.5</td></tr><tr><td>1624.09</td><td>40.3</td><td>40.3</td></tr><tr><td>null</td><td>null</td><td>null</td></tr><tr><td>1346.89</td><td>36.7</td><td>36.7</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n:::\n\n\nNow the next step is creating conditionals \n\n### ifelse equivalents\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nmutate(female = ifelse(sex == \"female\", TRUE, FALSE)) |>\nselect(sex, female) |>\nhead(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  sex    female\n  <fct>  <lgl> \n1 male   FALSE \n2 female TRUE  \n3 female TRUE  \n4 <NA>   NA    \n5 female TRUE  \n```\n\n\n:::\n:::\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# | label: check\n\npenguins.with_columns(female=pl.when(pl.col(\"sex\") == \"female\").then(\n    True).otherwise(False)).select([\"sex\", \"female\"]).head(5)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>sex</th><th>female</th></tr><tr><td>str</td><td>bool</td></tr></thead><tbody><tr><td>&quot;male&quot;</td><td>false</td></tr><tr><td>&quot;female&quot;</td><td>true</td></tr><tr><td>&quot;female&quot;</td><td>true</td></tr><tr><td>null</td><td>false</td></tr><tr><td>&quot;female&quot;</td><td>true</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n:::\n\nFull disclosure this took a much longer time than shown but this is the basic idea. Lets do this to keep myself a bit more honest. Recreate a silly example that I use to teach ifelse using the starwars dataset. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"starwars\")\n\narrow::write_parquet(starwars, \"starwars.parquet\")\n```\n:::\n\n\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars |>\nmutate(dog_years = birth_year * 7,\n       comment = paste(name, \"is\", dog_years, \"in dog years\")) |>\n       select(name, dog_years, comment) |>\n       head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  name           dog_years comment                           \n  <chr>              <dbl> <chr>                             \n1 Luke Skywalker      133  Luke Skywalker is 133 in dog years\n2 C-3PO               784  C-3PO is 784 in dog years         \n3 R2-D2               231  R2-D2 is 231 in dog years         \n4 Darth Vader         293. Darth Vader is 293.3 in dog years \n5 Leia Organa         133  Leia Organa is 133 in dog years   \n```\n\n\n:::\n:::\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars = pl.read_parquet(\"starwars.parquet\")\n\nstarwars.with_columns(dog_years=pl.col(\"birth_year\") * 7).with_columns(dog_years_string=pl.col(\"dog_years\").cast(\n    str)).with_columns(pl.concat_str([pl.col('name') , pl.lit('is'), pl.col('dog_years_string') , pl.lit('in dog years')]).alias('character_age')).select(pl.col('character_age'))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (87, 1)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>character_age</th></tr><tr><td>str</td></tr></thead><tbody><tr><td>&quot;Luke Skywalkeris133.0in dog ye…</td></tr><tr><td>&quot;C-3POis784.0in dog years&quot;</td></tr><tr><td>&quot;R2-D2is231.0in dog years&quot;</td></tr><tr><td>&quot;Darth Vaderis293.3in dog years&quot;</td></tr><tr><td>&quot;Leia Organais133.0in dog years&quot;</td></tr><tr><td>&hellip;</td></tr><tr><td>null</td></tr><tr><td>null</td></tr><tr><td>null</td></tr><tr><td>null</td></tr><tr><td>null</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.with_columns(big_peng = pl.when(pl.col(\"body_mass_g\") > pl.col(\"body_mass_g\").mean()).then(True).otherwise(False))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th><th>big_peng</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td><td>bool</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181.0</td><td>3750.0</td><td>&quot;male&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186.0</td><td>3800.0</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195.0</td><td>3250.0</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td><td>false</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193.0</td><td>3450.0</td><td>&quot;female&quot;</td><td>2007</td><td>false</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207.0</td><td>4000.0</td><td>&quot;male&quot;</td><td>2009</td><td>false</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202.0</td><td>3400.0</td><td>&quot;female&quot;</td><td>2009</td><td>false</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193.0</td><td>3775.0</td><td>&quot;male&quot;</td><td>2009</td><td>false</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210.0</td><td>4100.0</td><td>&quot;male&quot;</td><td>2009</td><td>false</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198.0</td><td>3775.0</td><td>&quot;female&quot;</td><td>2009</td><td>false</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n### Multiple columns \n\nSo one of the rubbing points as a `dplyr` user was that with columns isn't always easy to use if you want to refer to columns you made previously. However, I found that you can use the trusty old walrus operator `:=` to do that.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.with_columns(\n    body_mass_g := pl.col('body_mass_g')**2,\n    pl.col('body_mass_g').sqrt().alias('bg')\n)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (344, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>island</th><th>bill_length_mm</th><th>bill_depth_mm</th><th>flipper_length_mm</th><th>body_mass_g</th><th>sex</th><th>year</th><th>bg</th></tr><tr><td>str</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.1</td><td>18.7</td><td>181.0</td><td>1.40625e7</td><td>&quot;male&quot;</td><td>2007</td><td>61.237244</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>39.5</td><td>17.4</td><td>186.0</td><td>1.444e7</td><td>&quot;female&quot;</td><td>2007</td><td>61.64414</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>40.3</td><td>18.0</td><td>195.0</td><td>1.05625e7</td><td>&quot;female&quot;</td><td>2007</td><td>57.008771</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>2007</td><td>null</td></tr><tr><td>&quot;Adelie&quot;</td><td>&quot;Torgersen&quot;</td><td>36.7</td><td>19.3</td><td>193.0</td><td>1.19025e7</td><td>&quot;female&quot;</td><td>2007</td><td>58.736701</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>55.8</td><td>19.8</td><td>207.0</td><td>1.6e7</td><td>&quot;male&quot;</td><td>2009</td><td>63.245553</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>43.5</td><td>18.1</td><td>202.0</td><td>1.156e7</td><td>&quot;female&quot;</td><td>2009</td><td>58.309519</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>49.6</td><td>18.2</td><td>193.0</td><td>1.4250625e7</td><td>&quot;male&quot;</td><td>2009</td><td>61.441029</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.8</td><td>19.0</td><td>210.0</td><td>1.681e7</td><td>&quot;male&quot;</td><td>2009</td><td>64.031242</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>&quot;Dream&quot;</td><td>50.2</td><td>18.7</td><td>198.0</td><td>1.4250625e7</td><td>&quot;female&quot;</td><td>2009</td><td>61.441029</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\nIn this case we are just modifying things in place and then simply transforming things back.\n\n## Group by and summarize\n\n\nLast but not least we need to do the group by and summarise bit. It looks like this is slightly more intuitive\n\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\ngroup_by(species) |>\nsummarise(total = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  species   total\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n\n\n:::\n:::\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.group_by(pl.col(\"species\")).agg(total = pl.count())\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>total</th></tr><tr><td>str</td><td>u32</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>152</td></tr><tr><td>&quot;Gentoo&quot;</td><td>124</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>68</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n:::\n\n\nLets do some mathy stuff \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.group_by(pl.col(\"species\")).agg(count = pl.len(),\n                                         mean_flipp = pl.mean(\"flipper_length_mm\"),\n                                         median_flipp = pl.median(\"flipper_length_mm\"))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>count</th><th>mean_flipp</th><th>median_flipp</th></tr><tr><td>str</td><td>u32</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Adelie&quot;</td><td>152</td><td>189.953642</td><td>190.0</td></tr><tr><td>&quot;Chinstrap&quot;</td><td>68</td><td>195.823529</td><td>196.0</td></tr><tr><td>&quot;Gentoo&quot;</td><td>124</td><td>217.186992</td><td>216.0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n### across\n\nA thing that is useful in summarize is that we can use our selectors to summarise across multiple columns like this \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\ngroup_by(species) |>\nsummarise(across(starts_with(\"bill\"), list(mean = \\(x) mean(x, na.rm = TRUE,\n                                           median = \\(x) median(x, na.rm,  TRUE)))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  species   bill_length_mm_mean bill_depth_mm_mean\n  <fct>                   <dbl>              <dbl>\n1 Adelie                   38.8               18.3\n2 Chinstrap                48.8               18.4\n3 Gentoo                   47.5               15.0\n```\n\n\n:::\n:::\n\n\n\n\nIn polars I imagine it would probably be something like this \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.group_by(pl.col(\"species\")).agg(cs.starts_with(\"bill\").mean())\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mm</th><th>bill_depth_mm</th></tr><tr><td>str</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td><td>18.420588</td></tr><tr><td>&quot;Adelie&quot;</td><td>38.791391</td><td>18.346358</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td><td>14.982114</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nThe think I am running into now is that I would like to add a `_` without doing any extra work. It looks like according to the docs it should be this \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.group_by(pl.col(\"species\")).agg(cs.starts_with(\"bill\").mean().name.suffix(\"_mean\"),\n                                         cs.starts_with(\"bill\").median().name.suffix(\"_median\"))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 5)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>species</th><th>bill_length_mm_mean</th><th>bill_depth_mm_mean</th><th>bill_length_mm_median</th><th>bill_depth_mm_median</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Chinstrap&quot;</td><td>48.833824</td><td>18.420588</td><td>49.55</td><td>18.45</td></tr><tr><td>&quot;Gentoo&quot;</td><td>47.504878</td><td>14.982114</td><td>47.3</td><td>15.0</td></tr><tr><td>&quot;Adelie&quot;</td><td>38.791391</td><td>18.346358</td><td>38.8</td><td>18.4</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n# Joins in Polars \n\nIt would be nice if we had all the data we wanted in one dataset but that is not life we often need to join data. Critically we also would not want to have all our data in one place if we care about users safety. So we may want to keep portions of the dataset in separate places. So lets define a simple dataset to work with. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_data <- tribble(\n  ~state, ~year, ~unemployment, ~inflation, ~population,\n  \"GA\",   2018,  5,             2,          100,\n  \"GA\",   2019,  5.3,           1.8,        200,\n  \"GA\",   2020,  5.2,           2.5,        300,\n  \"NC\",   2018,  6.1,           1.8,        350,\n  \"NC\",   2019,  5.9,           1.6,        375,\n  \"NC\",   2020,  5.3,           1.8,        400,\n  \"CO\",   2018,  4.7,           2.7,        200,\n  \"CO\",   2019,  4.4,           2.6,        300,\n  \"CO\",   2020,  5.1,           2.5,        400\n)\n\nnational_libraries <- tribble(\n  ~state, ~year, ~libraries, ~schools,\n  \"CO\",   2018,  230,        470,\n  \"CO\",   2019,  240,        440,\n  \"CO\",   2020,  270,        510,\n  \"NC\",   2018,  200,        610,\n  \"NC\",   2019,  210,        590,\n  \"NC\",   2020,  220,        530,\n)\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nnational_dict = {\"state\": [\"Ga\", \"Ga\", \"Ga\",  \"NC\", \"NC\", \"NC\", \"CO\", \"CO\", \"CO\"], \"unemployment\":[6,6,8,6,4,3,7,8,9], \"year\": [2019,2018,2017,2019,2018,2017,2019,2018,2017]}\n\n\nnational_data = pl.DataFrame(national_dict)\n\n\nlibrary_dict = {\"state\":[\"CO\", \"CO\", \"CO\"], \"libraries\": [23234,2343234,32342342], \"year\":[2019,2018,2017]}\n\n\nlibrary_data = pl.DataFrame(library_dict)\n\n```\n:::\n\n\n\nWe may want to merge in the library dataset. In tidyland we would do something like this \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_data |>\nleft_join(national_libraries, join_by(state, year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 7\n  state  year unemployment inflation population libraries schools\n  <chr> <dbl>        <dbl>     <dbl>      <dbl>     <dbl>   <dbl>\n1 GA     2018          5         2          100        NA      NA\n2 GA     2019          5.3       1.8        200        NA      NA\n3 GA     2020          5.2       2.5        300        NA      NA\n4 NC     2018          6.1       1.8        350       200     610\n5 NC     2019          5.9       1.6        375       210     590\n6 NC     2020          5.3       1.8        400       220     530\n7 CO     2018          4.7       2.7        200       230     470\n8 CO     2019          4.4       2.6        300       240     440\n9 CO     2020          5.1       2.5        400       270     510\n```\n\n\n:::\n:::\n\n\n\nIn polars land we would join the data like this \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\njoined_data = national_data.join(library_data, on = [\"state\",\"year\"], how = \"left\")\n\njoined_data \n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (9, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>state</th><th>unemployment</th><th>year</th><th>libraries</th></tr><tr><td>str</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Ga&quot;</td><td>6</td><td>2019</td><td>null</td></tr><tr><td>&quot;Ga&quot;</td><td>6</td><td>2018</td><td>null</td></tr><tr><td>&quot;Ga&quot;</td><td>8</td><td>2017</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>6</td><td>2019</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>4</td><td>2018</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>3</td><td>2017</td><td>null</td></tr><tr><td>&quot;CO&quot;</td><td>7</td><td>2019</td><td>23234</td></tr><tr><td>&quot;CO&quot;</td><td>8</td><td>2018</td><td>2343234</td></tr><tr><td>&quot;CO&quot;</td><td>9</td><td>2017</td><td>32342342</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\nThis is honestly pretty comfortable. One thing that is really nice about dplyr is that you can pretty easily join columns that are not named the same thing. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_libraries = national_libraries |>\nrename(state_name = state)\n\n\n\nnational_data |>\nleft_join(national_libraries, join_by(state == state_name, year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 7\n  state  year unemployment inflation population libraries schools\n  <chr> <dbl>        <dbl>     <dbl>      <dbl>     <dbl>   <dbl>\n1 GA     2018          5         2          100        NA      NA\n2 GA     2019          5.3       1.8        200        NA      NA\n3 GA     2020          5.2       2.5        300        NA      NA\n4 NC     2018          6.1       1.8        350       200     610\n5 NC     2019          5.9       1.6        375       210     590\n6 NC     2020          5.3       1.8        400       220     530\n7 CO     2018          4.7       2.7        200       230     470\n8 CO     2019          4.4       2.6        300       240     440\n9 CO     2020          5.1       2.5        400       270     510\n```\n\n\n:::\n:::\n\n\nIn polars the process is less clear immediately. Instead of a nice `join_by` argument you have specify the keys separately. But still pretty intuitive. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlibrary_dat = library_data.rename({\"state\": \"state_name\"})\n\n\nnational_data.join(library_dat, left_on = [\"state\", \"year\"],\n               right_on = [\"state_name\", \"year\"], how = \"left\" )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (9, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>state</th><th>unemployment</th><th>year</th><th>libraries</th></tr><tr><td>str</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Ga&quot;</td><td>6</td><td>2019</td><td>null</td></tr><tr><td>&quot;Ga&quot;</td><td>6</td><td>2018</td><td>null</td></tr><tr><td>&quot;Ga&quot;</td><td>8</td><td>2017</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>6</td><td>2019</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>4</td><td>2018</td><td>null</td></tr><tr><td>&quot;NC&quot;</td><td>3</td><td>2017</td><td>null</td></tr><tr><td>&quot;CO&quot;</td><td>7</td><td>2019</td><td>23234</td></tr><tr><td>&quot;CO&quot;</td><td>8</td><td>2018</td><td>2343234</td></tr><tr><td>&quot;CO&quot;</td><td>9</td><td>2017</td><td>32342342</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\n\n# Binding Rows \n\nSometimes we just want to add rows to our data \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = data.frame(id = 1:2, vals = 1:2)\n\nb  = data.frame(id = 3:4, vals = 3:4)\n\n\na |>\nbind_rows(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id vals\n1  1    1\n2  2    2\n3  3    3\n4  4    4\n```\n\n\n:::\n:::\n\n\n\nor we want to add columns \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc = data.frame(chars = c(\"hello\", \"lorem\"),\n               var_23 = c(\"world\", \"ipsum\"))\n\na |>\nbind_cols(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id vals chars var_23\n1  1    1 hello  world\n2  2    2 lorem  ipsum\n```\n\n\n:::\n:::\n\n\n\n\n\nHow would we do this in polars? \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\na = pl.DataFrame(\n       {\"a\": [1,2],\n        \"b\": [3,4]}\n)\n\nb = pl.DataFrame({\"a\" : [3,4], \"b\": [5,6]})\n\n\npl.concat([a, b], how = \"vertical\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (4, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th></tr><tr><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>5</td></tr><tr><td>4</td><td>6</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nAgain fairly intuitive if we wanted to bind the columns \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nc = pl.DataFrame({\"chars\": [\"hello\", \"lorem\"], \"chars2\":[\"world\",\"ipsum\"]})\n\n\npl.concat([a,c], how = \"horizontal\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>a</th><th>b</th><th>chars</th><th>chars2</th></tr><tr><td>i64</td><td>i64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>1</td><td>3</td><td>&quot;hello&quot;</td><td>&quot;world&quot;</td></tr><tr><td>2</td><td>4</td><td>&quot;lorem&quot;</td><td>&quot;ipsum&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\n# Tidyr \n\n\n\n## Pivots of all shapes \n\nSometimes we need to pivot our data. Lets use the built in example from tidyr. Basically we have a whole bunch of columns that denote counts of income brackets \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig = relig_income\n\n\nwrite_csv(relig,\"relig_income.csv\")\n\n\nhead(relig_income)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  religion  `<$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` `$75-100k`\n  <chr>       <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>      <dbl>\n1 Agnostic       27        34        60        81        76       137        122\n2 Atheist        12        27        37        52        35        70         73\n3 Buddhist       27        21        30        34        33        58         62\n4 Catholic      418       617       732       670       638      1116        949\n5 Don’t kn…      15        14        15        11        10        35         21\n6 Evangeli…     575       869      1064       982       881      1486        949\n# ℹ 3 more variables: `$100-150k` <dbl>, `>150k` <dbl>,\n#   `Don't know/refused` <dbl>\n```\n\n\n:::\n:::\n\n\nIn tidyr we would just do this \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelig |>\npivot_longer(-religion,\n              names_to = \"income_bracket\",\n              values_to = \"count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 180 × 3\n   religion income_bracket     count\n   <chr>    <chr>              <dbl>\n 1 Agnostic <$10k                 27\n 2 Agnostic $10-20k               34\n 3 Agnostic $20-30k               60\n 4 Agnostic $30-40k               81\n 5 Agnostic $40-50k               76\n 6 Agnostic $50-75k              137\n 7 Agnostic $75-100k             122\n 8 Agnostic $100-150k            109\n 9 Agnostic >150k                 84\n10 Agnostic Don't know/refused    96\n# ℹ 170 more rows\n```\n\n\n:::\n:::\n\n\n\nwhich is nice because we can just identify a column and then pivot. One thing that I will have to just memorize is that when we are moving things to long in polars than we melt the dataframe. Kind of like a popsicle or something. The mnemonic device will come to me eventually \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nrelig = pl.read_csv(\"relig_income.csv\")\n\nrelig.head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 11)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>religion</th><th>&lt;$10k</th><th>$10-20k</th><th>$20-30k</th><th>$30-40k</th><th>$40-50k</th><th>$50-75k</th><th>$75-100k</th><th>$100-150k</th><th>&gt;150k</th><th>Don&#x27;t know/refused</th></tr><tr><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Agnostic&quot;</td><td>27</td><td>34</td><td>60</td><td>81</td><td>76</td><td>137</td><td>122</td><td>109</td><td>84</td><td>96</td></tr><tr><td>&quot;Atheist&quot;</td><td>12</td><td>27</td><td>37</td><td>52</td><td>35</td><td>70</td><td>73</td><td>59</td><td>74</td><td>76</td></tr><tr><td>&quot;Buddhist&quot;</td><td>27</td><td>21</td><td>30</td><td>34</td><td>33</td><td>58</td><td>62</td><td>39</td><td>53</td><td>54</td></tr><tr><td>&quot;Catholic&quot;</td><td>418</td><td>617</td><td>732</td><td>670</td><td>638</td><td>1116</td><td>949</td><td>792</td><td>633</td><td>1489</td></tr><tr><td>&quot;Don’t know/refused&quot;</td><td>15</td><td>14</td><td>15</td><td>11</td><td>10</td><td>35</td><td>21</td><td>17</td><td>18</td><td>116</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nTo melt all we do is \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nrelig.melt(id_vars = \"religion\", variable_name = \"income_bracket\", value_name = \"count\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (180, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>religion</th><th>income_bracket</th><th>count</th></tr><tr><td>str</td><td>str</td><td>i64</td></tr></thead><tbody><tr><td>&quot;Agnostic&quot;</td><td>&quot;&lt;$10k&quot;</td><td>27</td></tr><tr><td>&quot;Atheist&quot;</td><td>&quot;&lt;$10k&quot;</td><td>12</td></tr><tr><td>&quot;Buddhist&quot;</td><td>&quot;&lt;$10k&quot;</td><td>27</td></tr><tr><td>&quot;Catholic&quot;</td><td>&quot;&lt;$10k&quot;</td><td>418</td></tr><tr><td>&quot;Don’t know/refused&quot;</td><td>&quot;&lt;$10k&quot;</td><td>15</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Orthodox&quot;</td><td>&quot;Don&#x27;t know/refused&quot;</td><td>73</td></tr><tr><td>&quot;Other Christian&quot;</td><td>&quot;Don&#x27;t know/refused&quot;</td><td>18</td></tr><tr><td>&quot;Other Faiths&quot;</td><td>&quot;Don&#x27;t know/refused&quot;</td><td>71</td></tr><tr><td>&quot;Other World Religions&quot;</td><td>&quot;Don&#x27;t know/refused&quot;</td><td>8</td></tr><tr><td>&quot;Unaffiliated&quot;</td><td>&quot;Don&#x27;t know/refused&quot;</td><td>597</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\nsame would go for the pivoting wider \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.pivot(index = \"island\",columns = \"species\", values = \"body_mass_g\",\n              aggregate_function=\"sum\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>island</th><th>Adelie</th><th>Gentoo</th><th>Chinstrap</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;Torgersen&quot;</td><td>189025.0</td><td>null</td><td>null</td></tr><tr><td>&quot;Biscoe&quot;</td><td>163225.0</td><td>624350.0</td><td>null</td></tr><tr><td>&quot;Dream&quot;</td><td>206550.0</td><td>null</td><td>253850.0</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\nthis isn't quite the same because we are aggregating it. This is likely just a skill issue on the user end. But still we have wide data now!\n\n\n\n### Using selectors in pivot longer \n\n\nA slightly more complex example is using the billboards datas \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillboards = tidyr::billboard\n\n\nwrite_csv(billboards, \"billboard.csv\")\n\n\nhead(billboards)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  <chr>       <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n\n```{.r .cell-code}\n billboards |>\npivot_longer(cols = starts_with(\"wk\"),\n              names_to = \"week\",\n              values_to = \"count_of_weeks\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24,092 × 5\n   artist track                   date.entered week  count_of_weeks\n   <chr>  <chr>                   <date>       <chr>          <dbl>\n 1 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk1               87\n 2 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk2               82\n 3 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk3               72\n 4 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk4               77\n 5 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk5               87\n 6 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk6               94\n 7 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk7               99\n 8 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk8               NA\n 9 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk9               NA\n10 2 Pac  Baby Don't Cry (Keep... 2000-02-26   wk10              NA\n# ℹ 24,082 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe can do something similar with polars by using our selectors.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbillboards = pl.read_csv(\"billboard.csv\")\n\n\nbillboards.melt(id_vars = \"artist\",value_vars  = cs.starts_with(\"wk\"),\n                variable_name = \"week\", value_name = \"count\" )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (24_092, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>artist</th><th>week</th><th>count</th></tr><tr><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;2 Pac&quot;</td><td>&quot;wk1&quot;</td><td>&quot;87&quot;</td></tr><tr><td>&quot;2Ge+her&quot;</td><td>&quot;wk1&quot;</td><td>&quot;91&quot;</td></tr><tr><td>&quot;3 Doors Down&quot;</td><td>&quot;wk1&quot;</td><td>&quot;81&quot;</td></tr><tr><td>&quot;3 Doors Down&quot;</td><td>&quot;wk1&quot;</td><td>&quot;76&quot;</td></tr><tr><td>&quot;504 Boyz&quot;</td><td>&quot;wk1&quot;</td><td>&quot;57&quot;</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;Yankee Grey&quot;</td><td>&quot;wk76&quot;</td><td>&quot;NA&quot;</td></tr><tr><td>&quot;Yearwood, Trisha&quot;</td><td>&quot;wk76&quot;</td><td>&quot;NA&quot;</td></tr><tr><td>&quot;Ying Yang Twins&quot;</td><td>&quot;wk76&quot;</td><td>&quot;NA&quot;</td></tr><tr><td>&quot;Zombie Nation&quot;</td><td>&quot;wk76&quot;</td><td>&quot;NA&quot;</td></tr><tr><td>&quot;matchbox twenty&quot;</td><td>&quot;wk76&quot;</td><td>&quot;NA&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\nBroadly it works the same but if you don't specify the id vars you will end up with just the week and count column\n\n## Unnest\n\nSometimes we have these unfriendly list columns that we would like to make not lists. Lets go ahead and use the starwars list columns. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars_lists = starwars |>\nselect(name, where(is.list)) |>\nunnest_longer(starships , keep_empty = TRUE) |>\nunnest_longer(films, keep_empty = TRUE) |>\nunnest_longer(vehicles, keep_empty = TRUE)\n\n\n\n\n\nhead(starwars_lists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  name           films                   vehicles              starships\n  <chr>          <chr>                   <chr>                 <chr>    \n1 Luke Skywalker A New Hope              Snowspeeder           X-wing   \n2 Luke Skywalker A New Hope              Imperial Speeder Bike X-wing   \n3 Luke Skywalker The Empire Strikes Back Snowspeeder           X-wing   \n4 Luke Skywalker The Empire Strikes Back Imperial Speeder Bike X-wing   \n5 Luke Skywalker Return of the Jedi      Snowspeeder           X-wing   \n6 Luke Skywalker Return of the Jedi      Imperial Speeder Bike X-wing   \n```\n\n\n:::\n:::\n\n\n\nIn polars we have a similarish function named `explode`. Unfortunately we don't have a a selector for all attribute types so we are going to do this by hand. \n\n\n::: {.cell}\n\n```{.python .cell-code}\nstarwars_list = starwars.select([\"name\", \"films\", \"vehicles\", \"starships\"])\n\nstarwars_list.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 87\nColumns: 4\n$ name            <str> 'Luke Skywalker', 'C-3PO', 'R2-D2', 'Darth Vader', 'Leia Organa', 'Owen Lars', 'Beru Whitesun Lars', 'R5-D4', 'Biggs Darklighter', 'Obi-Wan Kenobi'\n$ films     <list[str]> ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'Revenge of the Sith', 'The Force Awakens'], ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'The Phantom Menace', 'Attack of the Clones', 'Revenge of the Sith'], ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'The Phantom Menace', 'Attack of the Clones', 'Revenge of the Sith', 'The Force Awakens'], ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'Revenge of the Sith'], ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'Revenge of the Sith', 'The Force Awakens'], ['A New Hope', 'Attack of the Clones', 'Revenge of the Sith'], ['A New Hope', 'Attack of the Clones', 'Revenge of the Sith'], ['A New Hope'], ['A New Hope'], ['A New Hope', 'The Empire Strikes Back', 'Return of the Jedi', 'The Phantom Menace', 'Attack of the Clones', 'Revenge of the Sith']\n$ vehicles  <list[str]> ['Snowspeeder', 'Imperial Speeder Bike'], [], [], [], ['Imperial Speeder Bike'], [], [], [], [], ['Tribubble bongo']\n$ starships <list[str]> ['X-wing', 'Imperial shuttle'], [], [], ['TIE Advanced x1'], [], [], [], [], ['X-wing'], ['Jedi starfighter', 'Trade Federation cruiser', 'Naboo star skiff', 'Jedi Interceptor', 'Belbullab-22 starfighter']\n```\n\n\n:::\n\n```{.python .cell-code}\nstarwars_explode =  starwars_list.explode(\"films\").explode(\"vehicles\").explode(\"starships\")\n\nstarwars_explode.head()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 4)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>name</th><th>films</th><th>vehicles</th><th>starships</th></tr><tr><td>str</td><td>str</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;Luke Skywalker&quot;</td><td>&quot;A New Hope&quot;</td><td>&quot;Snowspeeder&quot;</td><td>&quot;X-wing&quot;</td></tr><tr><td>&quot;Luke Skywalker&quot;</td><td>&quot;A New Hope&quot;</td><td>&quot;Snowspeeder&quot;</td><td>&quot;Imperial shuttle&quot;</td></tr><tr><td>&quot;Luke Skywalker&quot;</td><td>&quot;A New Hope&quot;</td><td>&quot;Imperial Speeder Bike&quot;</td><td>&quot;X-wing&quot;</td></tr><tr><td>&quot;Luke Skywalker&quot;</td><td>&quot;A New Hope&quot;</td><td>&quot;Imperial Speeder Bike&quot;</td><td>&quot;Imperial shuttle&quot;</td></tr><tr><td>&quot;Luke Skywalker&quot;</td><td>&quot;The Empire Strikes Back&quot;</td><td>&quot;Snowspeeder&quot;</td><td>&quot;X-wing&quot;</td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\n# Plotting data \n\n\nConfession time. I hate matplots I never think they look very nice. However I as somebody who enjoys data visualization should learn how to do it in python too. From what I can tell there are a few different attempts at porting over ggplot. But It seems like working in something somewhat standard versus going polars and ibis all the way probably makes sense.\n\nOne thing that should be mentioned is that missing values in python are not the same. Since quarto was getting mad at me for some reason about not having installed the palmer penguins package I decided to stop fighting with it. One thing that is \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd \n\n\npenguins = pd.read_csv(\"penguins.csv\")\n\nsns.set_theme(style = \"whitegrid\")\n```\n:::\n\n\nSo I think seaborne might be the way to go. Since I don't think histograms will go out of style lets just go and make a histogram \n\n## Histograms\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nsns.histplot(data = penguins, x = \"body_mass_g\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\n\neasy enough \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nsns.histplot(data = penguins, x = \"body_mass_g\", hue  = \"species\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-3.png){width=672}\n:::\n:::\n\n\n\nWhat if we wanted densities instead of frequencies? In ggplot it would be \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, fill = species)) +\ngeom_histogram(aes(y =  after_stat(density)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-5.png){width=672}\n:::\n:::\n\n\n\n\nIn sns it would be. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nsns.histplot(data = penguins, x = \"body_mass_g\", hue = \"species\", stat = \"density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n\nI really like the legend on the inside! In new `ggplot 3.whatever` it is different now that there is an explicit `legend.position=\"inside\"`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = body_mass_g, y = after_stat(density), fill = species)) +\ngeom_histogram() +\ntheme_minimal() +\ntheme(legend.position = c(.95,.95),\n      legend.justification = c(\"right\", \"top\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-63-3.png){width=672}\n:::\n:::\n\n\n\nCool I like that and will fiddle with that my ggplot theme! \n\n\nOkay lets now go and do some bivariate plots. Obviously the workhorse of bivariate plotting is the scatterplot .\n\n\n## Scatter Plots\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nsns.scatterplot(data = penguins, x = \"flipper_length_mm\", y = \"body_mass_g\", hue = \"species\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n\n\nthe next thing that we would want is to size points by the size of the penguin \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nsns.scatterplot(data = penguins, x = \"flipper_length_mm\", y = \"body_mass_g\", hue = \"species\", size = \"body_mass_g\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-3.png){width=672}\n:::\n:::\n\n\n\nThat is not really great since the legend is inside and covering stuff. In ggplot we would simply just move the legend position. In this case we have to save it as an object\n\n\n## Adjusting legend\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nexmp = sns.scatterplot(data = penguins, x = \"flipper_length_mm\", y = \"body_mass_g\", hue = \"species\", size = \"body_mass_g\")\n\nsns.move_legend(exmp, \"upper left\", bbox_to_anchor = (1,1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-5.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.lmplot(data = penguins, x = \"flipper_length_mm\", y = \"body_mass_g\", hue = \"species\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-7.png){width=297}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-8.png){width=596}\n:::\n:::\n\n\n\nThen the other one that I use all the time is using a line of best fit .\nOkay obviously the most annoying part is that we don't have great labels \n\n## Adding Informative Labels\n\n\n::: {.cell}\n\n```{.python .cell-code}\nlabs_examp = sns.lmplot(data = penguins, x = \"flipper_length_mm\", y = \"body_mass_g\", hue = \"species\")\n\n\n\nlabs_examp.set_axis_labels(x_var= \"Flipper Length(mm)\", y_var = \"Body Mass(g)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-68-11.png){width=296}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-68-12.png){width=596}\n:::\n:::\n\n\n\nOne of the things we may want to do is to create small multiples. \n\n## Facet Wrap\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsns.displot(data = penguins, x = \"body_mass_g\", hue = \"species\", row= \"species\", facet_kws = dict(margin_titles=False))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-69-15.png){width=307}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-69-16.png){width=596}\n:::\n:::\n\n\n\nI am honestly not wild about the plot but that is life\n\n# Modeling \n\nThe last step in the journey is really just learning the basics of modeling. The annoying part is that there is no native support for our favorite stats stuff. So no trusty dust glm or OLS when you open up python.  From the excellent [marginaleffects package](https://marginaleffects.com/vignettes/get_started.html) it looks like there is a nice interface called `statsmodels` and they have a formula api which works like modeling in `R` just without lazy evaluation. \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport statsmodels.formula.api as smf\nimport numpy as np\n\n```\n:::\n\n\n\nLets fit a few simple models to try and get the hang of statsmodels and see what happens. I will also load `broom` since I find that it makes working with all the various list components that R spits less annoying to work with. \n\n\nLets fit a univariate model first and then we can start playing with the api a little more\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(broom)\n\nnaive = lm(body_mass_g ~ flipper_length_mm, data = penguins)\n\ntidy(naive)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term              estimate std.error statistic   p.value\n  <chr>                <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)        -5781.     306.       -18.9 5.59e- 55\n2 flipper_length_mm     49.7      1.52      32.7 4.37e-107\n```\n\n\n:::\n:::\n\n\n\n\n## Python \n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nnaive = smf.ols(\"body_mass_g ~ flipper_length_mm\", data = penguins).fit()\n```\n:::\n\n\n\n:::\n\n\nThe biggest difference between the two approaches is that specifying the model and fitting the model are two different steps. If we wanted to see a similar print out we would have to do something like \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnaive.summary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>       <td>body_mass_g</td>   <th>  R-squared:         </th> <td>   0.759</td> \n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.758</td> \n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1071.</td> \n</tr>\n<tr>\n  <th>Date:</th>             <td>Tue, 22 Jul 2025</td> <th>  Prob (F-statistic):</th> <td>4.37e-107</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>16:52:35</td>     <th>  Log-Likelihood:    </th> <td> -2528.4</td> \n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>   342</td>      <th>  AIC:               </th> <td>   5061.</td> \n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>   340</td>      <th>  BIC:               </th> <td>   5069.</td> \n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n          <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th>         <td>-5780.8314</td> <td>  305.815</td> <td>  -18.903</td> <td> 0.000</td> <td>-6382.358</td> <td>-5179.305</td>\n</tr>\n<tr>\n  <th>flipper_length_mm</th> <td>   49.6856</td> <td>    1.518</td> <td>   32.722</td> <td> 0.000</td> <td>   46.699</td> <td>   52.672</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td> 5.634</td> <th>  Durbin-Watson:     </th> <td>   2.190</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.060</td> <th>  Jarque-Bera (JB):  </th> <td>   5.585</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 0.313</td> <th>  Prob(JB):          </th> <td>  0.0613</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 3.019</td> <th>  Cond. No.          </th> <td>2.89e+03</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.89e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.\n```\n\n:::\n:::\n\n\nCool. A multivariate model would broadly be the same. One thing that we can do in R is we can transform the predictors in the formula like this \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsquared = lm(body_mass_g ~ flipper_length_mm + I(flipper_length_mm^2) + bill_depth_mm,\n              data = penguins)\n              \ntidy(squared)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  term                    estimate std.error statistic     p.value\n  <chr>                      <dbl>     <dbl>     <dbl>       <dbl>\n1 (Intercept)            16824.     4532.         3.71 0.000240   \n2 flipper_length_mm       -181.       44.9       -4.04 0.0000669  \n3 I(flipper_length_mm^2)     0.573     0.110      5.19 0.000000363\n4 bill_depth_mm             29.3      12.9        2.28 0.0232     \n```\n\n\n:::\n:::\n\n\n\n\nWe can do something like it.\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsquared = smf.ols(\"body_mass_g ~ flipper_length_mm**2 + flipper_length_mm  + bill_depth_mm\", data = penguins).fit()\n\n\nsquared.summary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>       <td>body_mass_g</td>   <th>  R-squared:         </th> <td>   0.761</td> \n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.760</td> \n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   539.8</td> \n</tr>\n<tr>\n  <th>Date:</th>             <td>Tue, 22 Jul 2025</td> <th>  Prob (F-statistic):</th> <td>4.23e-106</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>16:52:35</td>     <th>  Log-Likelihood:    </th> <td> -2527.0</td> \n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>   342</td>      <th>  AIC:               </th> <td>   5060.</td> \n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>   339</td>      <th>  BIC:               </th> <td>   5071.</td> \n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>    \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n          <td></td>             <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th>         <td>-6541.9075</td> <td>  540.751</td> <td>  -12.098</td> <td> 0.000</td> <td>-7605.557</td> <td>-5478.258</td>\n</tr>\n<tr>\n  <th>flipper_length_mm</th> <td>   51.5414</td> <td>    1.865</td> <td>   27.635</td> <td> 0.000</td> <td>   47.873</td> <td>   55.210</td>\n</tr>\n<tr>\n  <th>bill_depth_mm</th>     <td>   22.6341</td> <td>   13.280</td> <td>    1.704</td> <td> 0.089</td> <td>   -3.488</td> <td>   48.756</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td> 5.490</td> <th>  Durbin-Watson:     </th> <td>   2.069</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.064</td> <th>  Jarque-Bera (JB):  </th> <td>   5.361</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 0.305</td> <th>  Prob(JB):          </th> <td>  0.0685</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 3.067</td> <th>  Cond. No.          </th> <td>5.14e+03</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 5.14e+03. This might indicate that there are<br/>strong multicollinearity or other numerical problems.\n```\n\n:::\n:::\n\n\nHowever the results differ pretty wildly! Luckily there is an I operator in the underlying thing that makes this work. The problem is that it only works on pandas dataframes\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n\npenguins_pd = pd.read_csv('penguins.csv')\n\n\nsquared = smf.ols('body_mass_g ~ I(flipper_length_mm**2) + flipper_length_mm + bill_depth_mm', data = penguins_pd).fit()\n\n```\n:::\n\n\n\nNow the results are lining up.  As a political scientist by training we love ourselves an interaction term. \n\n\n:::{.panel-tabset}\n\n\n## R \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninteracted = lm(body_mass_g ~ bill_depth_mm * species + flipper_length_mm,\ndata = penguins) \n\n\ntidy(interacted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 5\n  term                           estimate std.error statistic  p.value\n  <chr>                             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                     -4213.     648.      -6.50  2.84e-10\n2 bill_depth_mm                     176.      22.6      7.81  7.22e-14\n3 speciesChinstrap                 1008.     771.       1.31  1.92e- 1\n4 speciesGentoo                     129.     608.       0.213 8.32e- 1\n5 flipper_length_mm                  24.6      3.17     7.76  1.04e-13\n6 bill_depth_mm:speciesChinstrap    -61.5     42.0     -1.47  1.44e- 1\n7 bill_depth_mm:speciesGentoo        78.0     38.5      2.02  4.37e- 2\n```\n\n\n:::\n:::\n\n\n## Python \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ninteracted = smf.ols(\"body_mass_g ~ bill_length_mm * species + flipper_length_mm\", data = penguins_pd).fit()\n\n\ninteracted.summary()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<table class=\"simpletable\">\n<caption>OLS Regression Results</caption>\n<tr>\n  <th>Dep. Variable:</th>       <td>body_mass_g</td>   <th>  R-squared:         </th> <td>   0.826</td> \n</tr>\n<tr>\n  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.823</td> \n</tr>\n<tr>\n  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   265.8</td> \n</tr>\n<tr>\n  <th>Date:</th>             <td>Tue, 22 Jul 2025</td> <th>  Prob (F-statistic):</th> <td>4.07e-124</td>\n</tr>\n<tr>\n  <th>Time:</th>                 <td>16:52:36</td>     <th>  Log-Likelihood:    </th> <td> -2472.3</td> \n</tr>\n<tr>\n  <th>No. Observations:</th>      <td>   342</td>      <th>  AIC:               </th> <td>   4959.</td> \n</tr>\n<tr>\n  <th>Df Residuals:</th>          <td>   335</td>      <th>  BIC:               </th> <td>   4985.</td> \n</tr>\n<tr>\n  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>    \n</tr>\n<tr>\n  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n                   <td></td>                      <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n</tr>\n<tr>\n  <th>Intercept</th>                           <td>-4297.9054</td> <td>  645.054</td> <td>   -6.663</td> <td> 0.000</td> <td>-5566.772</td> <td>-3029.039</td>\n</tr>\n<tr>\n  <th>species[T.Chinstrap]</th>                <td> 1146.2869</td> <td>  726.217</td> <td>    1.578</td> <td> 0.115</td> <td> -282.232</td> <td> 2574.806</td>\n</tr>\n<tr>\n  <th>species[T.Gentoo]</th>                   <td>   54.7163</td> <td>  619.934</td> <td>    0.088</td> <td> 0.930</td> <td>-1164.739</td> <td> 1274.171</td>\n</tr>\n<tr>\n  <th>bill_length_mm</th>                      <td>   72.6920</td> <td>   10.642</td> <td>    6.831</td> <td> 0.000</td> <td>   51.759</td> <td>   93.625</td>\n</tr>\n<tr>\n  <th>bill_length_mm:species[T.Chinstrap]</th> <td>  -41.0350</td> <td>   16.104</td> <td>   -2.548</td> <td> 0.011</td> <td>  -72.713</td> <td>   -9.357</td>\n</tr>\n<tr>\n  <th>bill_length_mm:species[T.Gentoo]</th>    <td>   -1.1626</td> <td>   14.436</td> <td>   -0.081</td> <td> 0.936</td> <td>  -29.559</td> <td>   27.234</td>\n</tr>\n<tr>\n  <th>flipper_length_mm</th>                   <td>   27.2632</td> <td>    3.175</td> <td>    8.586</td> <td> 0.000</td> <td>   21.017</td> <td>   33.509</td>\n</tr>\n</table>\n<table class=\"simpletable\">\n<tr>\n  <th>Omnibus:</th>       <td> 4.761</td> <th>  Durbin-Watson:     </th> <td>   2.272</td>\n</tr>\n<tr>\n  <th>Prob(Omnibus):</th> <td> 0.093</td> <th>  Jarque-Bera (JB):  </th> <td>   4.564</td>\n</tr>\n<tr>\n  <th>Skew:</th>          <td> 0.279</td> <th>  Prob(JB):          </th> <td>   0.102</td>\n</tr>\n<tr>\n  <th>Kurtosis:</th>      <td> 3.098</td> <th>  Cond. No.          </th> <td>1.01e+04</td>\n</tr>\n</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.01e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems.\n```\n\n:::\n:::\n\n\n:::\n\n\nAgain for whatever reason patsy does not have great support for polars dataframe so the original polars frame throws an error. \n\nOne thing that we generally want to do is check our OLS assumptions. There are lots of different tests that we can run. But a good first check is to look at the fitted values versus the residuals. \n\n\nIn R we can do \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(patchwork)\n\ndropped_nas = penguins |> drop_na(sex)\n\n\nwith_species = lm(body_mass_g ~ bill_length_mm + flipper_length_mm + species,\n             data = dropped_nas)\n\ncheck_resids = augment(with_species, data = dropped_nas)\n\n\nviolation_one = ggplot(check_resids, aes(x = .fitted, y = .resid, color = species)) +\ngeom_point() +\ntheme_minimal()\n\nviolation_two = ggplot(check_resids, aes(x = .resid)) +\ngeom_histogram() +\ntheme_minimal()\n\n\nviolation_one + violation_two \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-79-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn Python we would do something like this. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenugins_pl = pl.read_csv('penguins.csv')\n\npenguins_sans_na = penguins.filter((pl.col(\"sex\").is_not_null())).to_pandas()\n\n\n\nwith_species = smf.ols('body_mass_g ~ bill_length_mm + flipper_length_mm + species', data = penguins_sans_na).fit()\n\npenguins_sans_na['fitted_vals'] = with_species.fittedvalues\n\npenguins_sans_na['residuals'] = with_species.resid\n\n\n\nsns.scatterplot(x = \"fitted_vals\", y = \"residuals\", hue = \"species\", data = penguins_sans_na)\n```\n:::\n\n\n\n# Misc stuff that are usefull but not neccessarilly useful all the time \n\nHere are the collection of misfits that I thought would be useful \n\n\n### Slice(family)\n\nOne useful thing that I use all the time when testing out various things I am doing is using slice. This can be specific rows or a random sample of rows! \n\n\nIf we wanted specific rows we could do this with `slice` \n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nslice(90:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Dream            38.9          18.8               190        3600\n 2 Adelie  Dream            35.7          18                 202        3550\n 3 Adelie  Dream            41.1          18.1               205        4300\n 4 Adelie  Dream            34            17.1               185        3400\n 5 Adelie  Dream            39.6          18.1               186        4450\n 6 Adelie  Dream            36.2          17.3               187        3300\n 7 Adelie  Dream            40.8          18.9               208        4300\n 8 Adelie  Dream            38.1          18.6               190        3700\n 9 Adelie  Dream            40.3          18.5               196        4350\n10 Adelie  Dream            33.1          16.1               178        2900\n11 Adelie  Dream            43.2          18.5               192        4100\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.slice(89:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninvalid syntax (<string>, line 1)\n```\n\n\n:::\n:::\n\n\n:::\n\n\nIt looks like the R user in me strikes. So in polars if you wanted to do the same thing you give the starting number of the row you want and the length of the row you want. So we would rewrite the code like this \n\n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\nslice(90:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Dream            38.9          18.8               190        3600\n 2 Adelie  Dream            35.7          18                 202        3550\n 3 Adelie  Dream            41.1          18.1               205        4300\n 4 Adelie  Dream            34            17.1               185        3400\n 5 Adelie  Dream            39.6          18.1               186        4450\n 6 Adelie  Dream            36.2          17.3               187        3300\n 7 Adelie  Dream            40.8          18.9               208        4300\n 8 Adelie  Dream            38.1          18.6               190        3700\n 9 Adelie  Dream            40.3          18.5               196        4350\n10 Adelie  Dream            33.1          16.1               178        2900\n11 Adelie  Dream            43.2          18.5               192        4100\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.slice(89,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAttributeError: 'DataFrame' object has no attribute 'slice'. Did you mean: 'size'?\n```\n\n\n:::\n:::\n\n\n:::\n\nI actually quite like the syntax of the python version better. It is just annoying having to reset my thinking to start counting at `0`\n\n\n\n\n### Slice Sample \n\nI find it useful to take a random sample of rows and test functions. It is nice for the function to work on a set of examples you come up with but not everything is consistent so lopping off chunks of a dataset and seeing if it still works is useful. \n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1994)\npenguins |>\nslice_sample(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>             <dbl>         <dbl>             <int>       <int>\n 1 Chinstrap Dream              50.2          18.7               198        3775\n 2 Adelie    Biscoe             39.7          18.9               184        3550\n 3 Chinstrap Dream              45.4          18.7               188        3525\n 4 Gentoo    Biscoe             46.2          14.1               217        4375\n 5 Gentoo    Biscoe             50            16.3               230        5700\n 6 Chinstrap Dream              49.8          17.3               198        3675\n 7 Adelie    Biscoe             35            17.9               192        3725\n 8 Adelie    Biscoe             40.6          18.6               183        3550\n 9 Adelie    Torgers…           40.6          19                 199        4000\n10 Chinstrap Dream              46.5          17.9               192        3500\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins.sample(n = 10, seed = 1994)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTypeError: NDFrame.sample() got an unexpected keyword argument 'seed'\n```\n\n\n:::\n:::\n\n\n:::\n\nLuckily the syntax is broadly the same! \n\n\n\n\n\n\n\n### Batch renaming \n\nOften times if we download data from the internet the column names are a mess and we want to rename them all at once. The janitor package in R is extra handy\n\nLets say we wanted to mass produce a camel case across the entire dataframe. In `R` that is a fairly simple task. Is it the case for python? \n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\njanitor::clean_names(case = \"lower_camel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island billLengthMm billDepthMm flipperLengthMm bodyMassG sex    year\n   <fct>   <fct>         <dbl>       <dbl>           <int>     <int> <fct> <int>\n 1 Adelie  Torge…         39.1        18.7             181      3750 male   2007\n 2 Adelie  Torge…         39.5        17.4             186      3800 fema…  2007\n 3 Adelie  Torge…         40.3        18               195      3250 fema…  2007\n 4 Adelie  Torge…         NA          NA                NA        NA <NA>   2007\n 5 Adelie  Torge…         36.7        19.3             193      3450 fema…  2007\n 6 Adelie  Torge…         39.3        20.6             190      3650 male   2007\n 7 Adelie  Torge…         38.9        17.8             181      3625 fema…  2007\n 8 Adelie  Torge…         39.2        19.6             195      4675 male   2007\n 9 Adelie  Torge…         34.1        18.1             193      3475 <NA>   2007\n10 Adelie  Torge…         42          20.2             190      4250 <NA>   2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom janitor import clean_names\n\npenguins = penguins.rename({\"bill_length_mm\": \"BillLengthMm\",\n                \"bill_depth_mm\" : \"BillDepthMm\"})\n\npenguins.clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen            40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen            36.7  ...       3450.0  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream            43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream            49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream            50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream            50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n\nIn my head it looks like this. Where we are effectively chaining clean names to the dataframe. From the documentation it looks like this \n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |>\njanitor::clean_names(case = \"small_camel\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island billLengthMm billDepthMm flipperLengthMm bodyMassG sex    year\n   <fct>   <fct>         <dbl>       <dbl>           <int>     <int> <fct> <int>\n 1 Adelie  Torge…         39.1        18.7             181      3750 male   2007\n 2 Adelie  Torge…         39.5        17.4             186      3800 fema…  2007\n 3 Adelie  Torge…         40.3        18               195      3250 fema…  2007\n 4 Adelie  Torge…         NA          NA                NA        NA <NA>   2007\n 5 Adelie  Torge…         36.7        19.3             193      3450 fema…  2007\n 6 Adelie  Torge…         39.3        20.6             190      3650 male   2007\n 7 Adelie  Torge…         38.9        17.8             181      3625 fema…  2007\n 8 Adelie  Torge…         39.2        19.6             195      4675 male   2007\n 9 Adelie  Torge…         34.1        18.1             193      3475 <NA>   2007\n10 Adelie  Torge…         42          20.2             190      4250 <NA>   2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclean_names(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen            40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen            36.7  ...       3450.0  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream            43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream            49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream            50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream            50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n\n\n:::\n:::\n\n\n:::\n\n\nOkay the trick it looks like is that it does not work with polars objects. So we need to pass it to pandas and then back to polars. \n\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd \n\npenguins.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <str> 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie'\n$ island            <str> 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen'\n$ bill_length_mm    <str> '39.1', '39.5', '40.3', 'NA', '36.7', '39.3', '38.9', '39.2', '34.1', '42'\n$ bill_depth_mm     <str> '18.7', '17.4', '18', 'NA', '19.3', '20.6', '17.8', '19.6', '18.1', '20.2'\n$ flipper_length_mm <str> '181', '186', '195', 'NA', '193', '190', '181', '195', '193', '190'\n$ body_mass_g       <str> '3750', '3800', '3250', 'NA', '3450', '3650', '3625', '4675', '3475', '4250'\n$ sex               <str> 'male', 'female', 'female', 'NA', 'female', 'male', 'female', 'male', 'NA', 'NA'\n$ year              <i64> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007\n```\n\n\n:::\n\n```{.python .cell-code}\npenguins_pd = penguins.to_pandas()\n\npenguins_clean = clean_names(penguins_pd, case_type = \"snake\")\n\npenguins = pl.from_pandas(penguins_clean)\n\npenguins.glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 344\nColumns: 8\n$ species           <str> 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie'\n$ island            <str> 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen', 'Torgersen'\n$ bill_length_mm    <str> '39.1', '39.5', '40.3', 'NA', '36.7', '39.3', '38.9', '39.2', '34.1', '42'\n$ bill_depth_mm     <str> '18.7', '17.4', '18', 'NA', '19.3', '20.6', '17.8', '19.6', '18.1', '20.2'\n$ flipper_length_mm <str> '181', '186', '195', 'NA', '193', '190', '181', '195', '193', '190'\n$ body_mass_g       <str> '3750', '3800', '3250', 'NA', '3450', '3650', '3625', '4675', '3475', '4250'\n$ sex               <str> 'male', 'female', 'female', 'NA', 'female', 'male', 'female', 'male', 'NA', 'NA'\n$ year              <i64> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007\n```\n\n\n:::\n:::\n\n\n\nThis works which is awesome! We got back to the original dataset naes \n\n\n\n## Make a column into a vector\n\n\nIn R there are like a ton of different ways to do this \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1 = penguins$bill_depth_mm\n\nvec2 = penguins |>\npluck(\"bill_depth_mm\")\n\nvec3 = penguins |>\nselect(bill_depth_mm) |>\ndeframe()\n```\n:::\n\n\nIn polars the equivalent of this \n\n\n::: {.cell}\n\n```{.python .cell-code}\nvec1 = penguins[\"bill_depth_mm\"]\n\nprint(vec1[0,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (2,)\nSeries: 'bill_depth_mm' [str]\n[\n\t\"18.7\"\n\t\"17.4\"\n]\n```\n\n\n:::\n:::\n\n\n\n:::{.panel-tabset}\n\n## R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18.7 17.4 18.0\n```\n\n\n:::\n:::\n\n\n\n\n\n## Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np \n\nprint(vec1[0:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nshape: (2,)\nSeries: 'bill_depth_mm' [str]\n[\n\t\"18.7\"\n\t\"17.4\"\n]\n```\n\n\n:::\n:::\n\n\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}